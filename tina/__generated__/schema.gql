# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  log(relativePath: String): Log!
  logConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LogFilter): LogConnection!
  product(relativePath: String): Product!
  productConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProductFilter): ProductConnection!
  branch(relativePath: String): Branch!
  branchConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BranchFilter): BranchConnection!
  siteConfig(relativePath: String): SiteConfig!
  siteConfigConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteConfigFilter): SiteConfigConnection!
}

input DocumentFilter {
  log: LogFilter
  product: ProductFilter
  branch: BranchFilter
  siteConfig: SiteConfigFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Log | Product | Branch | SiteConfig | Folder

type Log implements Node & Document {
  title: String!
  date: String!
  excerpt: String
  featuredImage: String
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input LogFilter {
  title: StringFilter
  date: DatetimeFilter
  excerpt: StringFilter
  featuredImage: ImageFilter
  tags: StringFilter
  body: RichTextFilter
}

type LogConnectionEdges {
  cursor: String!
  node: Log
}

type LogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LogConnectionEdges]
}

type Product implements Node & Document {
  title: String!
  price: String
  category: String
  featuredImage: String
  shopifyLink: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProductFilter {
  title: StringFilter
  price: StringFilter
  category: StringFilter
  featuredImage: ImageFilter
  shopifyLink: StringFilter
  body: RichTextFilter
}

type ProductConnectionEdges {
  cursor: String!
  node: Product
}

type ProductConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProductConnectionEdges]
}

type Branch implements Node & Document {
  title: String!
  featuredImage: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BranchFilter {
  title: StringFilter
  featuredImage: ImageFilter
  body: RichTextFilter
}

type BranchConnectionEdges {
  cursor: String!
  node: Branch
}

type BranchConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BranchConnectionEdges]
}

type SiteConfigMailchimp {
  signupUrl: String
}

type SiteConfigShopify {
  storeUrl: String
}

type SiteConfig implements Node & Document {
  mailchimp: SiteConfigMailchimp
  shopify: SiteConfigShopify
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteConfigMailchimpFilter {
  signupUrl: StringFilter
}

input SiteConfigShopifyFilter {
  storeUrl: StringFilter
}

input SiteConfigFilter {
  mailchimp: SiteConfigMailchimpFilter
  shopify: SiteConfigShopifyFilter
}

type SiteConfigConnectionEdges {
  cursor: String!
  node: SiteConfig
}

type SiteConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConfigConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateLog(relativePath: String!, params: LogMutation!): Log!
  createLog(relativePath: String!, params: LogMutation!): Log!
  updateProduct(relativePath: String!, params: ProductMutation!): Product!
  createProduct(relativePath: String!, params: ProductMutation!): Product!
  updateBranch(relativePath: String!, params: BranchMutation!): Branch!
  createBranch(relativePath: String!, params: BranchMutation!): Branch!
  updateSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
  createSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
}

input DocumentUpdateMutation {
  log: LogMutation
  product: ProductMutation
  branch: BranchMutation
  siteConfig: SiteConfigMutation
  relativePath: String
}

input DocumentMutation {
  log: LogMutation
  product: ProductMutation
  branch: BranchMutation
  siteConfig: SiteConfigMutation
}

input LogMutation {
  title: String
  date: String
  excerpt: String
  featuredImage: String
  tags: [String]
  body: JSON
}

input ProductMutation {
  title: String
  price: String
  category: String
  featuredImage: String
  shopifyLink: String
  body: JSON
}

input BranchMutation {
  title: String
  featuredImage: String
  body: JSON
}

input SiteConfigMailchimpMutation {
  signupUrl: String
}

input SiteConfigShopifyMutation {
  storeUrl: String
}

input SiteConfigMutation {
  mailchimp: SiteConfigMailchimpMutation
  shopify: SiteConfigShopifyMutation
}

schema {
  query: Query
  mutation: Mutation
}
