//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  log: Log;
  logConnection: LogConnection;
  product: Product;
  productConnection: ProductConnection;
  branch: Branch;
  branchConnection: BranchConnection;
  siteConfig: SiteConfig;
  siteConfigConnection: SiteConfigConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LogFilter>;
};


export type QueryProductArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProductConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProductFilter>;
};


export type QueryBranchArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBranchConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BranchFilter>;
};


export type QuerySiteConfigArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteConfigConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteConfigFilter>;
};

export type DocumentFilter = {
  log?: InputMaybe<LogFilter>;
  product?: InputMaybe<ProductFilter>;
  branch?: InputMaybe<BranchFilter>;
  siteConfig?: InputMaybe<SiteConfigFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Log | Product | Branch | SiteConfig | Folder;

export type Log = Node & Document & {
  __typename?: 'Log';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  excerpt?: Maybe<Scalars['String']['output']>;
  featuredImage?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LogFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  excerpt?: InputMaybe<StringFilter>;
  featuredImage?: InputMaybe<ImageFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type LogConnectionEdges = {
  __typename?: 'LogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Log>;
};

export type LogConnection = Connection & {
  __typename?: 'LogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LogConnectionEdges>>>;
};

export type Product = Node & Document & {
  __typename?: 'Product';
  title: Scalars['String']['output'];
  price?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  featuredImage?: Maybe<Scalars['String']['output']>;
  shopifyLink?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ProductFilter = {
  title?: InputMaybe<StringFilter>;
  price?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  featuredImage?: InputMaybe<ImageFilter>;
  shopifyLink?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ProductConnectionEdges = {
  __typename?: 'ProductConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Product>;
};

export type ProductConnection = Connection & {
  __typename?: 'ProductConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProductConnectionEdges>>>;
};

export type Branch = Node & Document & {
  __typename?: 'Branch';
  title: Scalars['String']['output'];
  featuredImage?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BranchFilter = {
  title?: InputMaybe<StringFilter>;
  featuredImage?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type BranchConnectionEdges = {
  __typename?: 'BranchConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Branch>;
};

export type BranchConnection = Connection & {
  __typename?: 'BranchConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BranchConnectionEdges>>>;
};

export type SiteConfigMailchimp = {
  __typename?: 'SiteConfigMailchimp';
  signupUrl?: Maybe<Scalars['String']['output']>;
};

export type SiteConfigShopify = {
  __typename?: 'SiteConfigShopify';
  storeUrl?: Maybe<Scalars['String']['output']>;
};

export type SiteConfig = Node & Document & {
  __typename?: 'SiteConfig';
  mailchimp?: Maybe<SiteConfigMailchimp>;
  shopify?: Maybe<SiteConfigShopify>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SiteConfigMailchimpFilter = {
  signupUrl?: InputMaybe<StringFilter>;
};

export type SiteConfigShopifyFilter = {
  storeUrl?: InputMaybe<StringFilter>;
};

export type SiteConfigFilter = {
  mailchimp?: InputMaybe<SiteConfigMailchimpFilter>;
  shopify?: InputMaybe<SiteConfigShopifyFilter>;
};

export type SiteConfigConnectionEdges = {
  __typename?: 'SiteConfigConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SiteConfig>;
};

export type SiteConfigConnection = Connection & {
  __typename?: 'SiteConfigConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteConfigConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateLog: Log;
  createLog: Log;
  updateProduct: Product;
  createProduct: Product;
  updateBranch: Branch;
  createBranch: Branch;
  updateSiteConfig: SiteConfig;
  createSiteConfig: SiteConfig;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateLogArgs = {
  relativePath: Scalars['String']['input'];
  params: LogMutation;
};


export type MutationCreateLogArgs = {
  relativePath: Scalars['String']['input'];
  params: LogMutation;
};


export type MutationUpdateProductArgs = {
  relativePath: Scalars['String']['input'];
  params: ProductMutation;
};


export type MutationCreateProductArgs = {
  relativePath: Scalars['String']['input'];
  params: ProductMutation;
};


export type MutationUpdateBranchArgs = {
  relativePath: Scalars['String']['input'];
  params: BranchMutation;
};


export type MutationCreateBranchArgs = {
  relativePath: Scalars['String']['input'];
  params: BranchMutation;
};


export type MutationUpdateSiteConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteConfigMutation;
};


export type MutationCreateSiteConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteConfigMutation;
};

export type DocumentUpdateMutation = {
  log?: InputMaybe<LogMutation>;
  product?: InputMaybe<ProductMutation>;
  branch?: InputMaybe<BranchMutation>;
  siteConfig?: InputMaybe<SiteConfigMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  log?: InputMaybe<LogMutation>;
  product?: InputMaybe<ProductMutation>;
  branch?: InputMaybe<BranchMutation>;
  siteConfig?: InputMaybe<SiteConfigMutation>;
};

export type LogMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  featuredImage?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ProductMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  price?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  featuredImage?: InputMaybe<Scalars['String']['input']>;
  shopifyLink?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type BranchMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  featuredImage?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SiteConfigMailchimpMutation = {
  signupUrl?: InputMaybe<Scalars['String']['input']>;
};

export type SiteConfigShopifyMutation = {
  storeUrl?: InputMaybe<Scalars['String']['input']>;
};

export type SiteConfigMutation = {
  mailchimp?: InputMaybe<SiteConfigMailchimpMutation>;
  shopify?: InputMaybe<SiteConfigShopifyMutation>;
};

export type LogPartsFragment = { __typename: 'Log', title: string, date: string, excerpt?: string | null, featuredImage?: string | null, tags?: Array<string | null> | null, body?: any | null };

export type ProductPartsFragment = { __typename: 'Product', title: string, price?: string | null, category?: string | null, featuredImage?: string | null, shopifyLink?: string | null, body?: any | null };

export type BranchPartsFragment = { __typename: 'Branch', title: string, featuredImage?: string | null, body?: any | null };

export type SiteConfigPartsFragment = { __typename: 'SiteConfig', mailchimp?: { __typename: 'SiteConfigMailchimp', signupUrl?: string | null } | null, shopify?: { __typename: 'SiteConfigShopify', storeUrl?: string | null } | null };

export type LogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LogQuery = { __typename?: 'Query', log: { __typename: 'Log', id: string, title: string, date: string, excerpt?: string | null, featuredImage?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type LogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LogFilter>;
}>;


export type LogConnectionQuery = { __typename?: 'Query', logConnection: { __typename?: 'LogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LogConnectionEdges', cursor: string, node?: { __typename: 'Log', id: string, title: string, date: string, excerpt?: string | null, featuredImage?: string | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ProductQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProductQuery = { __typename?: 'Query', product: { __typename: 'Product', id: string, title: string, price?: string | null, category?: string | null, featuredImage?: string | null, shopifyLink?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ProductConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProductFilter>;
}>;


export type ProductConnectionQuery = { __typename?: 'Query', productConnection: { __typename?: 'ProductConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProductConnectionEdges', cursor: string, node?: { __typename: 'Product', id: string, title: string, price?: string | null, category?: string | null, featuredImage?: string | null, shopifyLink?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type BranchQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BranchQuery = { __typename?: 'Query', branch: { __typename: 'Branch', id: string, title: string, featuredImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BranchConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BranchFilter>;
}>;


export type BranchConnectionQuery = { __typename?: 'Query', branchConnection: { __typename?: 'BranchConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BranchConnectionEdges', cursor: string, node?: { __typename: 'Branch', id: string, title: string, featuredImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type SiteConfigQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteConfigQuery = { __typename?: 'Query', siteConfig: { __typename: 'SiteConfig', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, mailchimp?: { __typename: 'SiteConfigMailchimp', signupUrl?: string | null } | null, shopify?: { __typename: 'SiteConfigShopify', storeUrl?: string | null } | null } };

export type SiteConfigConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteConfigFilter>;
}>;


export type SiteConfigConnectionQuery = { __typename?: 'Query', siteConfigConnection: { __typename?: 'SiteConfigConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteConfigConnectionEdges', cursor: string, node?: { __typename: 'SiteConfig', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, mailchimp?: { __typename: 'SiteConfigMailchimp', signupUrl?: string | null } | null, shopify?: { __typename: 'SiteConfigShopify', storeUrl?: string | null } | null } | null } | null> | null } };

export const LogPartsFragmentDoc = gql`
    fragment LogParts on Log {
  __typename
  title
  date
  excerpt
  featuredImage
  tags
  body
}
    `;
export const ProductPartsFragmentDoc = gql`
    fragment ProductParts on Product {
  __typename
  title
  price
  category
  featuredImage
  shopifyLink
  body
}
    `;
export const BranchPartsFragmentDoc = gql`
    fragment BranchParts on Branch {
  __typename
  title
  featuredImage
  body
}
    `;
export const SiteConfigPartsFragmentDoc = gql`
    fragment SiteConfigParts on SiteConfig {
  __typename
  mailchimp {
    __typename
    signupUrl
  }
  shopify {
    __typename
    storeUrl
  }
}
    `;
export const LogDocument = gql`
    query log($relativePath: String!) {
  log(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LogParts
  }
}
    ${LogPartsFragmentDoc}`;
export const LogConnectionDocument = gql`
    query logConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LogFilter) {
  logConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LogParts
      }
    }
  }
}
    ${LogPartsFragmentDoc}`;
export const ProductDocument = gql`
    query product($relativePath: String!) {
  product(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProductParts
  }
}
    ${ProductPartsFragmentDoc}`;
export const ProductConnectionDocument = gql`
    query productConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProductFilter) {
  productConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProductParts
      }
    }
  }
}
    ${ProductPartsFragmentDoc}`;
export const BranchDocument = gql`
    query branch($relativePath: String!) {
  branch(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BranchParts
  }
}
    ${BranchPartsFragmentDoc}`;
export const BranchConnectionDocument = gql`
    query branchConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BranchFilter) {
  branchConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BranchParts
      }
    }
  }
}
    ${BranchPartsFragmentDoc}`;
export const SiteConfigDocument = gql`
    query siteConfig($relativePath: String!) {
  siteConfig(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteConfigParts
  }
}
    ${SiteConfigPartsFragmentDoc}`;
export const SiteConfigConnectionDocument = gql`
    query siteConfigConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteConfigFilter) {
  siteConfigConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteConfigParts
      }
    }
  }
}
    ${SiteConfigPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      log(variables: LogQueryVariables, options?: C): Promise<{data: LogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LogQueryVariables, query: string}> {
        return requester<{data: LogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LogQueryVariables, query: string}, LogQueryVariables>(LogDocument, variables, options);
      },
    logConnection(variables?: LogConnectionQueryVariables, options?: C): Promise<{data: LogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LogConnectionQueryVariables, query: string}> {
        return requester<{data: LogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LogConnectionQueryVariables, query: string}, LogConnectionQueryVariables>(LogConnectionDocument, variables, options);
      },
    product(variables: ProductQueryVariables, options?: C): Promise<{data: ProductQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductQueryVariables, query: string}> {
        return requester<{data: ProductQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductQueryVariables, query: string}, ProductQueryVariables>(ProductDocument, variables, options);
      },
    productConnection(variables?: ProductConnectionQueryVariables, options?: C): Promise<{data: ProductConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductConnectionQueryVariables, query: string}> {
        return requester<{data: ProductConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProductConnectionQueryVariables, query: string}, ProductConnectionQueryVariables>(ProductConnectionDocument, variables, options);
      },
    branch(variables: BranchQueryVariables, options?: C): Promise<{data: BranchQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BranchQueryVariables, query: string}> {
        return requester<{data: BranchQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BranchQueryVariables, query: string}, BranchQueryVariables>(BranchDocument, variables, options);
      },
    branchConnection(variables?: BranchConnectionQueryVariables, options?: C): Promise<{data: BranchConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BranchConnectionQueryVariables, query: string}> {
        return requester<{data: BranchConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BranchConnectionQueryVariables, query: string}, BranchConnectionQueryVariables>(BranchConnectionDocument, variables, options);
      },
    siteConfig(variables: SiteConfigQueryVariables, options?: C): Promise<{data: SiteConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConfigQueryVariables, query: string}> {
        return requester<{data: SiteConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConfigQueryVariables, query: string}, SiteConfigQueryVariables>(SiteConfigDocument, variables, options);
      },
    siteConfigConnection(variables?: SiteConfigConnectionQueryVariables, options?: C): Promise<{data: SiteConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConfigConnectionQueryVariables, query: string}> {
        return requester<{data: SiteConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConfigConnectionQueryVariables, query: string}, SiteConfigConnectionQueryVariables>(SiteConfigConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  